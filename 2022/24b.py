from sys import stdin
from aocd import submit, get_data, lines
from PIL import Image

ll = get_data(day=24).splitlines()
g = [list(l) for l in ll]
bliz = []
for y,row in enumerate(g):
    for x,c in enumerate(row):
        if y == 0 and c == '.':
            ex,ey = x,y
        if y == len(g)-1 and c == '.':
            gx,gy = x,y
        if c in ['^','v','<','>']:
            bliz.append((x,y,c))
bmemo = {}
def blizz(m):
    if m in bmemo: return bmemo[m]
    b = {}
    for x,y,c in bliz:
        x-=1
        y-=1
        if c == '^': y = ((y-m)%(gy-1))
        if c == 'v': y = ((y+m)%(gy-1))
        if c == '<': x = ((x-m)%(gx))
        if c == '>': x = ((x+m)%(gx))
        x+=1
        y+=1
        if (x,y) in b: b[(x,y)] += 1
        else: b[(x,y)] = 1
    bmemo[m] = b
    return b

i = 0
x,y = 1,0
path1 = [(1, 1), (2, 1), (3, 1), (3, 2), (3, 2), (3, 3), (3, 4), (3, 4), (3, 5), (3, 6), (3, 6), (3, 7), (3, 8), (4, 8), (4, 9), (4, 10), (4, 10), (3, 10), (3, 11), (2, 11), (1, 11), (1, 12), (2, 12), (3, 12), (3, 13), (4, 13), (4, 14), (4, 13), (5, 13), (6, 13), (6, 14), (6, 15), (6, 16), (7, 16), (7, 17), (7, 16), (7, 16), (7, 15), (7, 15), (8, 15), (8, 14), (9, 14), (9, 15), (10, 15), (11, 15), (12, 15), (12, 16), (12, 17), (13, 17), (13, 18), (13, 19), (14, 19), (15, 19), (15, 20), (16, 20), (16, 19), (17, 19), (17, 20), (18, 20), (18, 19), (19, 19), (20, 19), (21, 19), (22, 19), (22, 18), (22, 17), (22, 16), (22, 15), (22, 14), (23, 14), (23, 14), (23, 13), (24, 13), (25, 13), (26, 13), (27, 13), (27, 12), (27, 11), (27, 10), (28, 10), (28, 10), (28, 9), (28, 8), (28, 8), (28, 9), (28, 8), (29, 8), (30, 8), (30, 9), (31, 9), (32, 9), (33, 9), (33, 10), (34, 10), (35, 10), (36, 10), (37, 10), (37, 11), (37, 11), (37, 12), (38, 12), (38, 12), (39, 12), (40, 12), (41, 12), (42, 12), (42, 13), (43, 13), (43, 13), (43, 13), (43, 13), (42, 13), (41, 13), (41, 14), (41, 15), (41, 14), (41, 14), (42, 14), (43, 14), (44, 14), (44, 13), (44, 12), (44, 13), (45, 13), (45, 13), (45, 14), (46, 14), (46, 14), (47, 14), (48, 14), (49, 14), (50, 14), (50, 15), (50, 16), (49, 16), (48, 16), (49, 16), (50, 16), (50, 17), (51, 17), (51, 17), (51, 17), (52, 17), (52, 18), (52, 19), (53, 19), (53, 20), (54, 20), (54, 20), (55, 20), (55, 21), (56, 21), (57, 21), (57, 21), (57, 22), (57, 23), (58, 23), (59, 23), (60, 23), (61, 23), (62, 23), (62, 23), (62, 22), (62, 21), (63, 21), (63, 21), (64, 21), (64, 22), (65, 22), (65, 23), (66, 23), (67, 23), (67, 24), (67, 25), (68, 25), (68, 26), (68, 27), (69, 27), (70, 27), (70, 27), (71, 27), (72, 27), (72, 28), (73, 28), (74, 28), (74, 27), (74, 26), (75, 26), (75, 26), (76, 26), (77, 26), (78, 26), (78, 26), (78, 25), (78, 24), (78, 24), (77, 24), (77, 23), (77, 23), (77, 22), (77, 22), (78, 22), (78, 23), (78, 22), (79, 22), (78, 22), (78, 22), (79, 22), (80, 22), (81, 22), (82, 22), (83, 22), (83, 22), (84, 22), (85, 22), (86, 22), (87, 22), (88, 22), (89, 22), (90, 22), (90, 23), (91, 23), (91, 23), (91, 23), (91, 24), (92, 24), (92, 23), (92, 23), (93, 23), (94, 23), (94, 24), (95, 24), (95, 25), (95, 26), (96, 26), (96, 25), (96, 25), (96, 25), (96, 25), (96, 26), (95, 26), (95, 27), (95, 28), (95, 29), (95, 30), (95, 31), (95, 31), (96, 31), (96, 32), (97, 32), (98, 32), (99, 32), (100, 32), (100, 32), (100, 33), (99, 33), (99, 34), (99, 35), (100, 35)]
path2 = [(100, 36), (100, 35), (99, 35), (99, 34), (98, 34), (98, 33), (98, 32), (98, 31), (98, 32), (97, 32), (97, 33), (97, 33), (97, 32), (97, 32), (96, 32), (95, 32), (95, 33), (94, 33), (94, 32), (94, 31), (94, 30), (94, 29), (95, 29), (95, 28), (94, 28), (93, 28), (92, 28), (91, 28), (90, 28), (90, 27), (90, 26), (90, 26), (90, 25), (90, 25), (89, 25), (88, 25), (87, 25), (86, 25), (85, 25), (85, 26), (85, 26), (84, 26), (83, 26), (83, 27), (82, 27), (81, 27), (81, 28), (80, 28), (80, 28), (80, 27), (80, 28), (80, 29), (79, 29), (79, 30), (79, 30), (80, 30), (80, 29), (81, 29), (81, 29), (82, 29), (81, 29), (81, 29), (80, 29), (80, 30), (80, 29), (80, 28), (80, 27), (80, 26), (80, 27), (80, 26), (81, 26), (81, 25), (81, 24), (81, 23), (81, 24), (81, 25), (80, 25), (80, 25), (79, 25), (80, 25), (80, 25), (79, 25), (79, 24), (78, 24), (77, 24), (77, 23), (77, 22), (76, 22), (75, 22), (75, 22), (74, 22), (73, 22), (73, 21), (72, 21), (71, 21), (70, 21), (69, 21), (68, 21), (67, 21), (66, 21), (66, 20), (66, 19), (65, 19), (65, 18), (65, 17), (64, 17), (63, 17), (63, 18), (62, 18), (61, 18), (61, 17), (60, 17), (60, 18), (59, 18), (58, 18), (57, 18), (56, 18), (56, 19), (55, 19), (55, 19), (55, 20), (54, 20), (53, 20), (52, 20), (51, 20), (50, 20), (51, 20), (51, 19), (51, 18), (50, 18), (49, 18), (49, 19), (48, 19), (48, 18), (47, 18), (48, 18), (48, 18), (47, 18), (46, 18), (45, 18), (45, 17), (44, 17), (43, 17), (43, 17), (43, 18), (42, 18), (41, 18), (40, 18), (39, 18), (39, 17), (39, 16), (38, 16), (38, 16), (37, 16), (37, 15), (36, 15), (36, 14), (36, 13), (35, 13), (35, 12), (34, 12), (34, 12), (35, 12), (35, 11), (35, 12), (35, 13), (34, 13), (34, 12), (33, 12), (33, 11), (33, 10), (32, 10), (32, 9), (31, 9), (31, 8), (31, 7), (30, 7), (29, 7), (28, 7), (27, 7), (26, 7), (26, 6), (25, 6), (24, 6), (23, 6), (22, 6), (22, 7), (22, 8), (23, 8), (23, 7), (22, 7), (22, 6), (22, 5), (22, 5), (21, 5), (21, 4), (20, 4), (20, 5), (19, 5), (19, 6), (18, 6), (18, 5), (17, 5), (17, 6), (16, 6), (16, 6), (16, 6), (16, 5), (17, 5), (17, 5), (16, 5), (16, 4), (16, 3), (16, 2), (15, 2), (14, 2), (14, 1), (14, 2), (13, 2), (12, 2), (11, 2), (10, 2), (9, 2), (8, 2), (9, 2), (9, 2), (8, 2), (7, 2), (6, 2), (5, 2), (4, 2), (3, 2), (3, 3), (3, 2), (3, 2), (2, 2), (1, 2), (1, 1)]
path3 = [(1, 0), (1, 1), (1, 2), (2, 2), (3, 2), (3, 2), (3, 3), (2, 3), (1, 3), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 8), (1, 8), (1, 8), (1, 9), (2, 9), (3, 9), (4, 9), (3, 9), (3, 10), (2, 10), (2, 11), (2, 12), (1, 12), (1, 13), (1, 13), (1, 13), (1, 13), (2, 13), (3, 13), (4, 13), (4, 12), (4, 13), (4, 14), (4, 15), (4, 16), (4, 16), (3, 16), (4, 16), (4, 17), (4, 18), (5, 18), (4, 18), (5, 18), (5, 17), (5, 17), (6, 17), (6, 16), (6, 15), (6, 15), (6, 16), (6, 16), (6, 17), (6, 18), (7, 18), (8, 18), (8, 18), (9, 18), (10, 18), (11, 18), (11, 19), (11, 20), (12, 20), (12, 21), (12, 22), (13, 22), (14, 22), (15, 22), (15, 21), (16, 21), (16, 22), (16, 23), (16, 24), (17, 24), (18, 24), (18, 25), (19, 25), (20, 25), (21, 25), (21, 24), (21, 23), (21, 22), (22, 22), (23, 22), (24, 22), (25, 22), (26, 22), (26, 22), (27, 22), (28, 22), (29, 22), (30, 22), (30, 23), (31, 23), (32, 23), (31, 23), (31, 24), (32, 24), (32, 23), (32, 23), (33, 23), (33, 23), (34, 23), (35, 23), (35, 22), (35, 22), (35, 21), (35, 21), (35, 21), (36, 21), (36, 20), (37, 20), (38, 20), (39, 20), (40, 20), (41, 20), (42, 20), (42, 21), (43, 21), (43, 22), (43, 23), (43, 24), (44, 24), (44, 24), (45, 24), (45, 23), (45, 22), (46, 22), (47, 22), (47, 21), (47, 21), (47, 22), (48, 22), (49, 22), (49, 22), (50, 22), (50, 23), (50, 24), (51, 24), (52, 24), (52, 24), (53, 24), (53, 24), (54, 24), (55, 24), (55, 25), (55, 26), (55, 26), (56, 26), (56, 26), (57, 26), (58, 26), (58, 25), (58, 24), (58, 24), (59, 24), (60, 24), (61, 24), (62, 24), (62, 24), (62, 24), (62, 25), (63, 25), (63, 25), (64, 25), (64, 25), (64, 26), (64, 27), (64, 27), (65, 27), (65, 28), (64, 28), (64, 29), (64, 30), (64, 31), (64, 32), (64, 33), (65, 33), (65, 34), (65, 35), (66, 35), (67, 35), (68, 35), (69, 35), (69, 34), (70, 34), (70, 35), (71, 35), (72, 35), (73, 35), (73, 35), (74, 35), (75, 35), (76, 35), (76, 34), (76, 33), (76, 32), (77, 32), (78, 32), (78, 31), (79, 31), (80, 31), (81, 31), (81, 32), (82, 32), (83, 32), (83, 33), (83, 34), (83, 35), (84, 35), (85, 35), (86, 35), (87, 35), (86, 35), (87, 35), (87, 35), (88, 35), (88, 35), (89, 35), (89, 35), (90, 35), (91, 35), (92, 35), (93, 35), (94, 35), (95, 35), (94, 35), (95, 35), (95, 35), (95, 35), (96, 35), (97, 35), (98, 35), (98, 34), (98, 33), (98, 33), (98, 33), (98, 34), (98, 35), (97, 35), (98, 35), (99, 35), (100, 35)]

colors = {
    'walls': (0,100,40),
}

def draw():
    global i
    image = Image.new('RGB', (len(g[0]), len(g)))
    b = blizz(i)
    for bx,by in b:
        image.putpixel((bx,by),(100+10*b[(bx,by)],100+10*b[(bx,by)],100+10*b[(bx,by)]))
    for d in range(len(g[0])):
        if d == ex: continue
        image.putpixel((d,0),colors['walls'])
    for d in range(len(g[0])):
        if d == gx: continue
        image.putpixel((d,len(g)-1),colors['walls'])
    for d in range(len(g)):
        image.putpixel((0,d),colors['walls'])
    for d in range(len(g)):
        image.putpixel((len(g[0])-1,d),colors['walls'])
    image.putpixel((x,y),(100,40,0))
    image = image.resize((len(g[0])*20,len(g)*20), Image.Resampling.NEAREST)
    image.save("frames/24_"+str(i)+".png")
    i+=1

draw()
for x,y in path1:
    draw()
for x,y in path2:
    draw()
for x,y in path3:
    draw()

x,y = 100, 36
draw()
